<div id="genericDialog" style="display: none;"><h3>Saving</h3><p>Saving page and refreshing the view - please wait.</p></div>
<div id="emptySlotMenu" class="skin0">
<div class="igmenuitems linkAddComponent" onclick="insertComponent();"><a href='#'>$addComponentHTML</a></div>
<hr id="emptySlotMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div id="accessRightsMenuItem" class="igmenuitems linkAccessRights" onclick="setAccessRights(slotName, slotContentId);"><a href='#'>$accessRightsHTML</a></div>
<div id="noActionAvailableSlotMenuItem" class="igmenuitems noActionMenuItem"><a href='#'>$noActionAvailableHTML</a></div>
</div>

<div id="componentMenu" class="skin0">
<div class="igmenuitems linkEditArticle" onclick="edit();"><a href='#'>$editHTML</a></div>
<div class="igmenuitems linkAddComponent" onclick="insertComponent();"><a href='#'>$addComponentHTML</a></div>
<div id="deleteComponentMenuItem" class="igmenuitems linkDeleteComponent" onclick="deleteComponent('$confirmDeleteLabel');"><a href='#'>$deleteComponentHTML</a></div>
<div id="changeComponentMenuItem" class="igmenuitems linkChangeComponent" onclick="changeComponent();"><a href='#'>$changeComponentHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$saveTemplateUrl"><a href='#'>$savePageTemplateHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$savePartTemplateUrl"><a href='#'>$savePagePartTemplateHTML</a></div>
<hr id="componentMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkComponentProperties" onclick="javascript:showComponent();"><a href='#'>$propertiesHTML</a></div>
<hr id="componentMenuMiddleSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkPageComponents" onclick="toggleDiv('pageComponents');"><a href='#'>$pageComponents</a></div>
<div class="igmenuitems linkOpenInNewWindow" onclick="window.open(document.location.href,'PageComponents','');"><a href='#'>$componentEditorInNewWindowHTML</a></div>
<div class="igmenuitems linkViewSource"><a href='javascript:viewSource();'>$viewSource</a></div>
</div>

<div id="componentInTreeMenu" class="skin0">
	<div id="deleteComponentInTreeMenuItem" class="igmenuitems linkDeleteComponent" onclick="deleteComponent('$confirmDeleteLabel');"><a href='#'>$deleteComponentHTML</a></div>
	<div id="changeComponentInTreeMenuItem" class="igmenuitems linkChangeComponent" onclick="changeComponent();"><a href='#'>$changeComponentHTML</a></div>
	<div id="createPageTemplateInTreeMenuItem" class="igmenuitems linkCreatePageTemplate" onclick="$savePartTemplateUrl"><a href='#'>$savePagePartTemplateHTML</a></div>
	<hr id="componentInTreeMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
	<div id="componentPropertiesInTreeMenuItem" class="igmenuitems linkComponentProperties" onclick="javascript:showComponent();"><a href='#'>$propertiesHTML</a></div>
	<div id="noActionAvailableMenuItem" class="igmenuitems noActionMenuItem"><a href='#'>$noActionAvailableHTML</a></div>
</div>

<div id="pageToolbar" class="editOnSightFooterToolbar buttonPane">
	<div class="left" style="margin-left: 8px; margin-bottom: 6px;">
		<input id="igSaveButton" type="button" style="display:none;" class="save" value="${tool.common.saveButton.label}" onclick="saveAllEditing();"/>
		<input id="igCancelButton" type="button" style="display:none;" class="cancel" value="${tool.common.cancelButton.label}" onclick="cancelAllEditing();"/>
		<input id="igApproveButton" type="button" style="display:none;" class="approvePublication" value="${tool.contenttool.approve.label}" onclick="approvePublication();"/>
		<input id="igDenyButton" type="button" style="display:none;" class="denyPublication" value="${tool.contenttool.deny.label}" onclick="denyPublication();"/>
		<input id="igPublishButton" type="button" style="display:none;" class="publish" value="${tool.common.publishing.publishButtonLabel}" onclick="submitToPublish($siteNodeId, contentId, languageId, repositoryId, componentEditorUrl + '/ViewInlineOperationMessages.action');"/>
		<input id="igPreviewButton" type="button" style="display:none;" class="preview" value="${tool.structuretool.toolbarV3.previewPageLabel}" onclick="previewPage();"/>
	</div>
	
	<div class="right myHome" style="display:none;" title="${deliver.editOnSight.toolbarHomeButton.title}" onclick="document.location.href='${homeURL}';"></div>
	<div class="right mySettings" style="display:none;" title="${deliver.editOnSight.toolbarMySettingsButton.title}" onclick="openInlineDivImpl(componentEditorUrl + '/ViewMySettings.action', 700, 750, true, true);"></div>
	<div class="right openInNewWindow" style="display:none;" title="${deliver.editOnSight.toolbarNewWindowButton.title}" onclick="window.open(document.location.href,'PageComponents','');"></div>
	<div class="right validateW3C" style="display:none;" title="${deliver.editOnSight.toolbarValidateW3CButton.title}" onclick="validateW3C();"><div class="errorCountW3C"></div></div>
	${userDefinedButtons}
	<div class="right">${deliver.editOnSight.toolbarInlineEditing.title}: <input type="checkbox" id="inlineEditing" value="true" checked="checked" onclick="toggleInline(event);"/></div>
	<div class="right languageContext" style="display:none;"><span title="${currentLanguageName}" onclick="$('#languageSelector').toggle();">${currentLanguageCode}</span><div id="languageSelector" style="display: none; position: fixed; padding: 6px 0 0 10px; bottom: 42px; margin-left: -11px; width: 28px; color: black; background-color: white; box-shadow: rgba(0, 0, 0, 0.2) 0px -3px 3px;"><ul style="list-style: none;">${languageList}</ul></div></div>
	<div id="igStatusDiv" class="right loadingState"><span id="igStatus">-</span></div>
</div>

<form id="validatorW3CForm" method="post" action="http://validator.w3.org/check" target="_blank">
	<input type="hidden" id="fragment" name="fragment" value=""/>
</form>

<script type="text/javascript">

window.editorIsActive = false;
window.loadDataOnWYSIWYGActivation = new Array();
window.igInlineEditSaveFallBackValues = new Array();
window.igInlineSaveStatus = new Array();
window.igInlineSaveErrorOccurred = false;
window.igInlineSaveErrorKeys = new Array();
window.igSaveAttributesInProgress = new Array();

window.isPageDirty = false;
window.onbeforeunload = function() {
	if(window.isPageDirty)
		return "${leaveWarningOnDirtyPageText}";
}

function validateW3C()
{
	var previewUrl = document.location.href;
	previewUrl = previewUrl.replace("!renderDecoratedPage.", ".");
	
	$.get(previewUrl, function(data) {
	  
	  	try
		{
			$.ajax({
				type: "POST",
			   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!validateW3C.action",
			   	data: { "markup": data },
			   	dataType: 'json',
			   	cache: false,
			   	success: function(msg, textStatus){
					//alert("msg:" + msg);
					//alert("textStatus:" + textStatus);
					//alert("Messages:" + msg.messages);
					var errors = 0;
					jQuery.each(msg.messages, function() {
					  	//alert("lastLine: " + this.lastLine + ", lastColumn: " + this.lastColumn + ", message: " + this.message + ", type:" + this.type);
					  	if(this.type == "error")
					  	{
					  		errors++;
					  	}
					});
					
					if(errors > 0)
					{
						$(".errorCountW3C").css("display","block").html(errors);
						var confirmQuestion = "${deliver.editOnSight.toolbarValidateW3CErrorsQuestion.label}";
						confirmQuestion = confirmQuestion.replace("{0}",errors);
						if(confirm(confirmQuestion))
						{
							$("#fragment").val(data);
							$("#validatorW3CForm").get(0).submit();
						}
					}
					else
					{
						alert("${deliver.editOnSight.toolbarValidateW3CNoErrors.label}");
			   		}
			   },
			   error: function (XMLHttpRequest, textStatus, errorThrown) {
				   //alert("textStatus:" + textStatus);
				   //alert("ResponseCode:" + XMLHttpRequest.status);
				   alert("We could not validate against W3C: " + textStatus + "/" + errorThrown);
			   }
			});
		}
		catch(e) {console.log("e:" + e);}
	
	});
}

function previewPage()
{
	var currentUrl = document.location.href;
	currentUrl = currentUrl.replace("!renderDecoratedPage.", ".");
	window.open(currentUrl);
}

function hideFooterButtons()
{	
	if(window.self !== window.top)
	{
		$(".myHome, .mySettings, .preview, .publish").hide();
		if(window.hasOpenInNewWindowAccess)
			$(".openInNewWindow").show();
	}
	else
	{
		$(".myHome, .mySettings, .preview").show();
		$(".openInNewWindow").hide();		
	}
	
	if(window.hasAccessToW3CValidator)
		$(".validateW3C").show();
	if(window.hasAccessToShowLanguageMenu)
		$(".languageContext").show();
}

function registerOnChange()
{
	if(typeof(CKEDITOR) != 'undefined')
	{
		for (key in editOnSightAttributeNames)
		{
			//alert("key:" + key);
			if(key.indexOf("_type") == -1 && 
			   key.indexOf("_enableWYSIWYG") == -1 && 
			   key.indexOf("_originalValue") == -1 && 
			   key.indexOf("_WYSIWYGToolbar") == -1 &&
			   key.indexOf("_WYSIWYGExtraConfig") == -1 &&
			   key.indexOf("_contentId") == -1 &&
			   key.indexOf("_languageId") == -1)
			{
				//alert("key:" + key);
				//alert("key:" + CKEDITOR.instances[key]);
				if(CKEDITOR.instances[key])
				{
					if(!useDoubleClickOnTextToInlineEdit && !window.loadDataOnWYSIWYGActivation[key])
						window.loadDataOnWYSIWYGActivation[key] = true;
				
					//alert("regii:" + key);
					CKEDITOR.instances[key].on('change', function(e) {
					    $("#igSaveButton").show();
					    $("#igCancelButton").show();
					    $("#igPublishButton").attr("disabled", "disabled").css("opacity",0.5);
					    $("#igPreviewButton").attr("disabled", "disabled").css("opacity",0.5);
				        window.saveButtonLabel = $("#igSaveButton").attr("value");
				        window.isPageDirty = true;
					});
	
					CKEDITOR.instances[key].on('focus', function(e) {
						//console.log("on focus:" + e.editor.element.getId());
						//console.log("AAA:" + CKEDITOR.instances[e.editor.element.getId()].checkDirty());
						//console.log("window.loadDataOnWYSIWYGActivation[e.editor.element.getId()]:" + window.loadDataOnWYSIWYGActivation[e.editor.element.getId()]);
						
						//console.log("e.editor.element.getId():" + e.editor.element.getId() + "/" + window.loadDataOnWYSIWYGActivation[e.editor.element.getId()], window.loadDataOnWYSIWYGActivation);
						if(window.loadDataOnWYSIWYGActivation[e.editor.element.getId()])
						{
							//console.log("YEP");
							//alert("on focus:" + e.editor.element.getId());
							var attributeName = editOnSightAttributeNames[e.editor.element.getId()];
							//alert("att name:" + attributeName);
							var attributeType = editOnSightAttributeNames[e.editor.element.getId() + "_type"];
							var attributeContentId = editOnSightAttributeNames[e.editor.element.getId() + "_contentId"];
							var attributeLanguageId = editOnSightAttributeNames[e.editor.element.getId() + "_languageId"];
						 	var enableWYSIWYG = editOnSightAttributeNames[e.editor.element.getId() + "_enableWYSIWYG"];
									
							var data = "contentId=" + attributeContentId + "&languageId=" + attributeLanguageId + "&attributeName=" + attributeName;
									
							$.ajax({
							   	type: "GET",
							   	url: "" + componentEditorUrl + "UpdateContentVersionAttribute!getAttributeValue.action",
							   	data: data,
							   	cache: false,
							   	success: function(msg, textStatus){
									plainAttribute = msg;
							   		//console.log("loaded: ...." + (plainAttribute == CKEDITOR.instances[e.editor.element.getId()].getData()));
							   		//console.log(plainAttribute);
							   		//console.log(CKEDITOR.instances[e.editor.element.getId()].getData());
							   		
									window.loadDataOnWYSIWYGActivation[e.editor.element.getId()] = false;
							   		
									editOnSightAttributeNames[e.editor.element.getId() + "_originalValue"] = plainAttribute;
									
									if(enableWYSIWYG == "true")
									{
										if(userPrefferredWYSIWYG  == "ckeditor4" || userPrefferredWYSIWYG  == "" || typeof(userPrefferredWYSIWYG )=="undefined")
										{
											//console.log(e.editor.checkDirty());
											//if(!e.editor.checkDirty())
											//{
												var bookmarks = e.editor.getSelection().createBookmarks2(true);
												e.editor.setData(msg, function() {
													this.checkDirty(); // true
													e.editor.getSelection().selectBookmarks(bookmarks);
													this.resetDirty();
												});
											//}
										}
									}
								},
							   error: function (XMLHttpRequest, textStatus, errorThrown) {
							   		//alert("textStatus:" + textStatus);
								   	alert("ResponseCode:" + XMLHttpRequest.status);
								   	//alert("errorThrown:" + errorThrown);
								   	if(XMLHttpRequest.status == 403)
								   	{
									   alert("You are not logged in properly to the administrative tools - please log in again.");
									   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
								   	}
								   	else
								   	{
									   alert("You are not allowed to edit this text!");
								   	}
							   	}
							});
						}
					});
				}
			}
		}		
	}
}

var inlineOff = false;

function hasDirtyEditors()
{
	for (key in editOnSightAttributeNames)
	{
		if(CKEDITOR.instances[key])
		{
			if (CKEDITOR.instances[key].checkDirty()) {
				return true;
			}
		}
	}
	return false;
}

function initWYSIWYGInstance(key, isTextField)
{	
	var WYSIWYGToolbar = editOnSightAttributeNames[key + "_WYSIWYGToolbar"];
	var WYSIWYGExtraConfig = editOnSightAttributeNames[key + "_WYSIWYGExtraConfig"];
	var ckTextContentId = editOnSightAttributeNames[key + "_contentId"];
	var ckTextLanguageId = editOnSightAttributeNames[key + "_languageId"];
	var configParameters = "repositoryId=" + repositoryId + "&contentId=" + ckTextContentId + "&languageId=" + ckTextLanguageId;
	var config;
	try
	{
		if(!isTextField)
			config = eval("({" + WYSIWYGExtraConfig + "})");
	}
	catch(err)
	{
		if (typeof console === "object")
		{
			console.log("Error in extra config", err);
		}
	}
	if (typeof config !== "object")
	{
		config = {};
	}
	
	if(isTextField)
	{
		config["removePlugins"] = "toolbar";
		config["autoParagraph"] = false;
	}
	else
	{
		config["toolbar"] = WYSIWYGToolbar;
		config["customConfig"] = cmsBaseUrl + "/WYSIWYGProperties.action?" + configParameters;
		config["language"] = ckTextLanguageId;
	}
	
	config["on"] = {
        change: function(e) {
		    $("#igSaveButton").show();
		    $("#igCancelButton").show();
		    $("#igPublishButton").attr("disabled", "disabled").css("opacity",0.5);
		    $("#igPreviewButton").attr("disabled", "disabled").css("opacity",0.5);
	        window.saveButtonLabel = $("#igSaveButton").attr("value");
	        window.isPageDirty = true;
		},
        blur: function(e) {
			window.editorIsActive = false;
		},
		focus: function(e) {
		    window.editorIsActive = true;
			if(window.loadDataOnWYSIWYGActivation[e.editor.element.getId()])
			{
				//console.log("YEP");
				//alert("on focus:" + e.editor.element.getId());
				var attributeName = editOnSightAttributeNames[e.editor.element.getId()];
				//alert("att name:" + attributeName);
				var attributeType = editOnSightAttributeNames[e.editor.element.getId() + "_type"];
				var attributeContentId = editOnSightAttributeNames[e.editor.element.getId() + "_contentId"];
				var attributeLanguageId = editOnSightAttributeNames[e.editor.element.getId() + "_languageId"];
			 	var enableWYSIWYG = editOnSightAttributeNames[e.editor.element.getId() + "_enableWYSIWYG"];
						
				var data = "contentId=" + attributeContentId + "&languageId=" + attributeLanguageId + "&attributeName=" + attributeName;
						
				$.ajax({
				   	type: "GET",
				   	url: "" + componentEditorUrl + "UpdateContentVersionAttribute!getAttributeValue.action",
				   	data: data,
				   	cache: false,
				   	success: function(msg, textStatus){
						plainAttribute = msg;
				   		//console.log("loaded: ...." + (plainAttribute == CKEDITOR.instances[e.editor.element.getId()].getData()));
				   		//console.log(plainAttribute);
				   		//console.log(CKEDITOR.instances[e.editor.element.getId()].getData());
				   		
						window.loadDataOnWYSIWYGActivation[e.editor.element.getId()] = false;
				   		
						editOnSightAttributeNames[e.editor.element.getId() + "_originalValue"] = plainAttribute;
						
						if(enableWYSIWYG == "true")
						{
							if(userPrefferredWYSIWYG  == "ckeditor4" || userPrefferredWYSIWYG  == "" || typeof(userPrefferredWYSIWYG )=="undefined")
							{
								//console.log(e.editor.checkDirty());
								//if(!e.editor.checkDirty())
								//{
									var bookmarks = e.editor.getSelection().createBookmarks2(true);
									e.editor.setData(msg, function() {
										this.checkDirty(); // true
										e.editor.getSelection().selectBookmarks(bookmarks);
										this.resetDirty();
									});
								//}
							}
						}
					},
				   error: function (XMLHttpRequest, textStatus, errorThrown) {
				   		//alert("textStatus:" + textStatus);
					   	alert("ResponseCode:" + XMLHttpRequest.status);
					   	//alert("errorThrown:" + errorThrown);
					   	if(XMLHttpRequest.status == 403)
					   	{
						   alert("You are not logged in properly to the administrative tools - please log in again.");
						   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
					   	}
					   	else
					   	{
						   alert("You are not allowed to edit this text!");
					   	}
				   	}
				});
			}
		}
	}
	
	CKEDITOR.inline( key, config );
}

function toggleInlineDoubleClick(id, event)
{
	var editor = CKEDITOR.instances[id]; 
	if(typeof(editor) != 'undefined')
	{
		//console.log("allready there");
		return;
	}

	toggleInline(event, id);
	
	document.getElementById(id).focus(); 

	setTimeout(function(){
		var editor = CKEDITOR.instances[id]; 
		if(typeof(editor) != 'undefined')
		{
			editor.setData(editor.getData().replace(/[\u200B-\u200D\uFEFF]/g, ''));
		}
	},200);

	$('#inlineEditing').attr('checked', true);
}

function toggleInline(event, id)
{
	//console.log("toggleInline........");
	try
	{
		if(typeof(CKEDITOR) == 'undefined')
		{
			return;
		}
	
		if (!useDoubleClickOnTextToInlineEdit && !inlineOff && hasDirtyEditors())
		{
			alert("${tool.structuretool.toolbarV3.disableEditmodeNotAllowed}");
			event.preventDefault();
		}
		else
		{
			var turnOn = false;
			if(inlineOff)
				turnOn = true;
			for (key in editOnSightAttributeNames)
			{
				//alert("key:" + key);
				if(key.indexOf("_type") == -1 && 
				   key.indexOf("_originalValue") == -1 && 
				   key.indexOf("_enableWYSIWYG") == -1 && 
				   key.indexOf("_WYSIWYGToolbar") == -1 &&
				   key.indexOf("_WYSIWYGExtraConfig") == -1 &&
				   key.indexOf("_contentId") == -1 &&
				   key.indexOf("_languageId") == -1)
				{
					try
					{
					
						//console.log("key:" + key);
						//console.log("id:" + id);
											
						//alert("key:" + key);
						//alert("key:" + CKEDITOR.instances[key]);
						if(CKEDITOR.instances[key])
						{
							if (!useDoubleClickOnTextToInlineEdit)
							{
								//console.log("Destroy...:" + !turnOn + " for " + key);
								window.loadDataOnWYSIWYGActivation[key] = true;
								
								if (!turnOn)
								{
									CKEDITOR.instances[key].destroy();
									$("#" + key).attr("contenteditable", "false");
								}
							}
							else
							{
								console.log("Not destroying it: " + key);
							}
						}
						else
						{
							//console.log("id:" + id);
							//console.log("Activating wysiwug for " + key);
							window.loadDataOnWYSIWYGActivation[key] = true;
							//editOnSightAttributeNames[key + "_originalValue"] = "" + $("#" + key).html();
							$("#" + key).attr("contenteditable", "true");
							if(editOnSightAttributeNames[key + "_type"] == "textfield")
							{
								initWYSIWYGInstance(key, true);
							}
							else
							{
								initWYSIWYGInstance(key, false);
							}
								
							CKEDITOR.instances[key].resetDirty();
						}
						
					}
					catch(err)
					{
						console.log(err);
					}
				}
			}

			if(turnOn)
			{
				inlineOff = false;
				//registerOnChange();
			}
			else
			{
				inlineOff = true;
			}
		}
	}
	catch(err)
	{
		console.log(err);
	}
}

function checkSaveStatus(tries)
{
	var isAllSaved = true;
	for (key in editOnSightAttributeNames)
	{
		//alert("Key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_originalValue") == -1 &&
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1)
		{
			if(!window.igInlineSaveStatus[key])
				isAllSaved = false;
		}
	}
	
	if(!isAllSaved && tries < 10)
		setTimeout(checkSaveStatus(tries+1), 300);
}

function completeSaveProcedure()
{
	//console.log("completeSaveProcedure window.igSaveAttributesInProgress:", Object.keys(window.igSaveAttributesInProgress).length);
	if(Object.keys(window.igSaveAttributesInProgress).length == 0)
	{
		if(window.igInlineSaveErrorOccurred)
		{
			for(var key in window.igInlineSaveErrorKeys) 
			{
				$("#" + key).addClass("validationError").focus();
				console.log("Error found.." + window.igInlineSaveErrorKeys[key]);
			}
			for (key in editOnSightAttributeNames)
			{
				if(key.indexOf("_type") == -1 && 
				   key.indexOf("_contentId") == -1 && 
				   key.indexOf("_languageId") == -1 && 
				   key.indexOf("_enableWYSIWYG") == -1 && 
				   key.indexOf("_originalValue") == -1 &&
				   key.indexOf("_WYSIWYGToolbar") == -1 &&
				   key.indexOf("_WYSIWYGExtraConfig") == -1)
				{
					if(igInlineEditSaveFallBackValues[key + "_originalValue"])
					{
						editOnSightAttributeNames[key + "_originalValue"] = igInlineEditSaveFallBackValues[key + "_originalValue"];
						if(CKEDITOR.instances[key])
							CKEDITOR.instances[key].resetDirty();
					}
					else
					{
						if(CKEDITOR.instances[key])
							CKEDITOR.instances[key].resetDirty();
					}
				}
			}
			
			$("#igSaveButton").attr("value","Save");
		}
		else
		{
			if(useDoubleClickOnTextToInlineEdit)
			{
				for (editorKey in CKEDITOR.instances)
				{
					CKEDITOR.instances[editorKey].destroy();
					//console.log("editor", editorKey);
					$("#" + editorKey).attr("contenteditable", "false");
				}
				inlineOff = true;	    
			}
			
			window.isPageDirty = false;
			var labelValue = window.saveButtonLabel;
			setTimeout(function(){ $("#igSaveButton").attr("value","Saved!!"); }, 1000);
			//$("#igSaveButton").hide();
			setTimeout(function(){ $("#igSaveButton").fadeOut(1000); $("#igCancelButton").hide();}, 2000);
			setTimeout(function(){ $("#igSaveButton").attr("value", window.saveButtonLabel);}, 3000);
			$("#igPublishButton").removeAttr("disabled").css("opacity",1.0);
		    $("#igPreviewButton").removeAttr("disabled").css("opacity",1.0);	    
		    
		    $(".validationError").removeClass("validationError")
		}
	}
}

function saveAllEditing()
{
	window.igInlineSaveErrorOccurred = false;
	
	$("#igSaveButton").attr("value","Saving...");
	var allSavedItems = 0;
	for (key in editOnSightAttributeNames)
	{
		//alert("Key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_originalValue") == -1 &&
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1)
		{
			var attributeName = editOnSightAttributeNames[key];
			var attributeType = editOnSightAttributeNames[key + "_type"];
			var attributeContentId = editOnSightAttributeNames[key + "_contentId"];
			var attributeLanguageId = editOnSightAttributeNames[key + "_languageId"];

			if(CKEDITOR.instances[key])
			{
				//alert(CKEDITOR.instances[key].checkDirty());
				//console.log("Checking: " + window.loadDataOnWYSIWYGActivation[key]);
				if(CKEDITOR.instances[key].checkDirty() && !window.loadDataOnWYSIWYGActivation[key])
				{
					igInlineEditSaveFallBackValues[key + "_originalValue"] = editOnSightAttributeNames[key + "_originalValue"];
					
					window.igSaveAttributesInProgress[key] = true;
					console.log("window.igSaveAttributesInProgress start", window.igSaveAttributesInProgress);
					saveAttribute(attributeContentId, attributeLanguageId, attributeName, attributeType, key);
					allSavedItems++;
				}
			}
		}
	}
			
	if(allSavedItems == 0)
	{
		alert("No changes had been made and so nothing was saved");
		window.isPageDirty = false;
		var labelValue = window.saveButtonLabel;
		setTimeout(function(){ $("#igSaveButton").attr("value","Saved!!"); }, 1000);
		//$("#igSaveButton").hide();
		setTimeout(function(){ $("#igSaveButton").fadeOut(1000); $("#igCancelButton").hide();}, 2000);
		setTimeout(function(){ $("#igSaveButton").attr("value", window.saveButtonLabel);}, 3000);
		$("#igPublishButton").removeAttr("disabled").css("opacity",1.0);
	    $("#igPreviewButton").removeAttr("disabled").css("opacity",1.0);	    
	    
	    $(".validationError").removeClass("validationError")
	}
}


function cancelAllEditing()
{
	var allSavedItems = 0;
	for (key in editOnSightAttributeNames)
	{
		//alert("Key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_originalValue") == -1 &&
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1)
		{
			var attributeName = editOnSightAttributeNames[key];
			var attributeType = editOnSightAttributeNames[key + "_type"];
			var attributeContentId = editOnSightAttributeNames[key + "_contentId"];
			var attributeLanguageId = editOnSightAttributeNames[key + "_languageId"];

			//console.log(CKEDITOR.instances);
			//console.log(key);
			//console.log(CKEDITOR.instances[key]);
			if(CKEDITOR.instances[key])
			{
				if(CKEDITOR.instances[key].checkDirty() || window.igInlineSaveErrorOccurred)
				{
					CKEDITOR.instances[key].setData(editOnSightAttributeNames[key + "_originalValue"]);
					CKEDITOR.instances[key].resetDirty();
				}
				
				if(useDoubleClickOnTextToInlineEdit)
				{
					CKEDITOR.instances[key].destroy();
					$("#" + key).attr("contenteditable", "false");
					inlineOff = true;
				}
			}
		}
	}

	$("#igSaveButton").hide();
	$("#igCancelButton").hide();
	$("#igPublishButton").removeAttr("disabled").css("opacity",1.0);
    $("#igPreviewButton").removeAttr("disabled").css("opacity",1.0);
    $(".validationError").removeClass("validationError")

	window.isPageDirty = false;
}

function updatePageStatus()
{
	try
	{
		var data = "contentId=" + contentId + "&siteNodeId=$siteNodeId";
		if(approveEntityName != "" && approveEntityId != "")
			var data = "contentId=" + contentId + "&siteNodeId=$siteNodeId&approveEntityName=" + approveEntityName + "&approveEntityId=" + approveEntityId + "&eventId=" + publishingEventId;
			
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!publishableNumberOfItems.action",
		   	data: data,
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				
				if(msg != "0")
				{
					$('#igStatusDiv').attr("class", "right working");
					$('#igStatus').html("" + msg);
					if(msg.indexOf("approve=true") > -1)
					{
						var eventId = ""+msg.match(/eventId=[0-9]{1,10}/g);
						if(eventId != "")
						{
							window.publishingEventId = eventId.substring(8);
							$('#igApproveButton').show();
							$('#igDenyButton').show();
						}
					}
					else
					{
						if(window.self === window.top)
							$('#igPublishButton').show();
					}
				}
				else
				{
					$('#igStatusDiv').attr("class", "right published");
					$('#igStatus').html(window.publishedLabel);
					$('#igApproveButton').hide();
					$('#igDenyButton').hide();
					$('#igPublishButton').hide();
					$('#igCancelButton').hide();
				}
				
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   alert("ResponseCode:" + XMLHttpRequest.status);
			   //alert("errorThrown:" + errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

function approvePublication()
{
	try
	{
		var data = "eventId=" + publishingEventId + "&repositoryId=" + repositoryId;
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!approvePublication.action",
		   	data: data,
		   	dataType: "html", 
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				//alert("OK");
				document.location.reload(true);
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   //alert("ResponseCode:" + XMLHttpRequest.status);
			   //console.log(errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

function denyPublication()
{
	try
	{
		var data = "eventId=" + publishingEventId + "&repositoryId=" + repositoryId;
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!denyPublication.action",
		   	data: data,
		   	dataType: "html", 
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				//alert("OK");
				document.location.reload(true);
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   //alert("ResponseCode:" + XMLHttpRequest.status);
			   //console.log(errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

$addComponentJavascript
$deleteComponentJavascript
$changeComponentJavascript
$changeAccessJavascript

$submitToPublishJavascript
$pageStructureJavascript
$openInNewWindowJavascript
$allowViewSourceJavascript
$allowSavePageTemplateJavascript

$submitToNotifyJavascript
$contentNotificationsJavascript
$pageNotificationsJavascript		    

$W3CValidatorJavascript		    
$ShowLanguageMenuJavascript		    
$showHomeButtonJavascript		    
$showMySettingsButtonJavascript		    

$ShowApproveButtonsJavascript
$autoShowApprovalButtonsJavascript

var useDoubleClickOnTextToInlineEdit = $useDoubleClickOnTextToInlineEdit;
if(useDoubleClickOnTextToInlineEdit)
{
	$("#inlineEditing").attr("checked", false).parent().hide();
}
</script>