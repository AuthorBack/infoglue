<div id="genericDialog" style="display: none;"><h3>Saving</h3><p>Saving page and refreshing the view - please wait.</p></div>
<div id="emptySlotMenu" class="skin0">
<div class="igmenuitems linkPublish" onclick="submitToPublish($siteNodeId, $contentId, $languageId, $repositoryId, '$originalFullURL');"><a href='#'>$submitToPublishHTML</a></div>
<div class="igmenuitems linkNotify" onclick="openInlineDivImpl('$notifyUrl', 700, 750, true, true);"><a href='#'>$notifyHTML</a></div>
<div class="igmenuitems linkTakePage" onclick="openInlineDivImpl('$pageSubscriptionUrl', 700, 750, true, true);"><a name='subscribePage'>$subscribeToPageHTML</a></div>
<div class="igmenuitems linkAddComponent" onclick="insertComponent();"><a href='#'>$addComponentHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$saveTemplateUrl"><a href='#'>$savePageTemplateHTML</a></div>
<hr id="emptySlotMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div id="accessRightsMenuItem" class="igmenuitems linkAccessRights" onclick="setAccessRights(slotName, slotContentId);"><a href='#'>$accessRightsHTML</a></div>
<div class="igmenuitems linkPageComponents" onclick="toggleDiv('pageComponents');"><a href='javascript:void(0);'>$pageComponents</a></div>
<div class="igmenuitems linkOpenInNewWindow" onclick="window.open(document.location.href,'PageComponents','');"><a href='#'>$componentEditorInNewWindowHTML</a></div>
<div class="igmenuitems linkViewSource"><a href='javascript:viewSource();'>$viewSource</a></div>
</div>

<div id="componentMenu" class="skin0">
<div class="igmenuitems linkEditArticle" onclick="edit();"><a href='#'>$editHTML</a></div>
<div class="igmenuitems linkAddComponent" onclick="insertComponent();"><a href='#'>$addComponentHTML</a></div>
<div id="deleteComponentMenuItem" class="igmenuitems linkDeleteComponent" onclick="deleteComponent('$confirmDeleteLabel');"><a href='#'>$deleteComponentHTML</a></div>
<div id="changeComponentMenuItem" class="igmenuitems linkChangeComponent" onclick="changeComponent();"><a href='#'>$changeComponentHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$saveTemplateUrl"><a href='#'>$savePageTemplateHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$savePartTemplateUrl"><a href='#'>$savePagePartTemplateHTML</a></div>
<hr id="componentMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkComponentProperties" onclick="javascript:showComponent();"><a href='#'>$propertiesHTML</a></div>
<hr id="componentMenuMiddleSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkPageComponents" onclick="toggleDiv('pageComponents');"><a href='#'>$pageComponents</a></div>
<div class="igmenuitems linkOpenInNewWindow" onclick="window.open(document.location.href,'PageComponents','');"><a href='#'>$componentEditorInNewWindowHTML</a></div>
<div class="igmenuitems linkViewSource"><a href='javascript:viewSource();'>$viewSource</a></div>
</div>

<div id="componentInTreeMenu" class="skin0">
<div id="deleteComponentInTreeMenuItem" class="igmenuitems linkDeleteComponent" onclick="deleteComponent('$confirmDeleteLabel');"><a href='#'>$deleteComponentHTML</a></div>
<div id="changeComponentInTreeMenuItem" class="igmenuitems linkChangeComponent" onclick="changeComponent();"><a href='#'>$changeComponentHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$saveTemplateUrl"><a href='#'>$savePageTemplateHTML</a></div>
<div class="igmenuitems linkCreatePageTemplate" onclick="$savePartTemplateUrl"><a href='#'>$savePagePartTemplateHTML</a></div>
<hr id="componentInTreeMenuTopSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkComponentProperties" onclick="javascript:showComponent();"><a href='#'>$propertiesHTML</a></div>
<hr id="emptySlotMenuMiddleSeparator" style="border:0px; border-top:1px solid #bbb; margin-top:4px; margin-bottom:4px;"/>
<div class="igmenuitems linkPageComponents" onclick="toggleDiv('pageComponents');"><a href='#'>$pageComponents</a></div>
<div class="igmenuitems linkOpenInNewWindow" onclick="window.open(document.location.href,'PageComponents','');"><a href='#'>$componentEditorInNewWindowHTML</a></div>
<div class="igmenuitems linkViewSource"><a href='javascript:viewSource();'>$viewSource</a></div>
</div>

<div id="pageToolbar" class="editOnSightFooterToolbar buttonPane">
	<div class="left" style="margin-left: 8px; margin-bottom: 6px;">
		<input id="igSaveButton" type="button" style="display:none;" class="save" value="${tool.common.saveButton.label}" onclick="saveAllEditing();"/>
		##<input id="igCancelButton" type="button" style="display:none;" class="cancel" value="${tool.common.cancelButton.label}" onclick="hideDiv('component" + componentId + "Properties');"/>
		<input id="igApproveButton" type="button" style="display:none;" class="approvePublication" value="${tool.contenttool.approve.label}" onclick="approvePublication();"/>
		<input id="igDenyButton" type="button" style="display:none;" class="denyPublication" value="${tool.contenttool.deny.label}" onclick="denyPublication();"/>
		<input id="igPublishButton" type="button" style="display:none;" class="publish" value="${tool.common.publishing.publishButtonLabel}" onclick="submitToPublish($siteNodeId, contentId, languageId, repositoryId, componentEditorUrl + '/ViewInlineOperationMessages.action');"/>
		<input id="igPreviewButton" type="button" style="display:none;" class="preview" value="${tool.structuretool.toolbarV3.previewPageLabel}" onclick="previewPage();"/>
	</div>

	<div class="right myHome" style="display:none;" title="${deliver.editOnSight.toolbarHomeButton.title}" onclick="document.location.href='${homeURL}';"></div>
	<div class="right mySettings" style="display:none;" title="${deliver.editOnSight.toolbarMySettingsButton.title}" onclick="openInlineDivImpl(componentEditorUrl + '/ViewMySettings.action', 700, 750, true, true);"></div>
	<div class="right openInNewWindow" style="display:none;" title="${deliver.editOnSight.toolbarNewWindowButton.title}" onclick="window.open(document.location.href,'PageComponents','');"></div>
	<div class="right validateW3C" style="display:none;" title="${deliver.editOnSight.toolbarValidateW3CButton.title}" onclick="validateW3C();"><div class="errorCountW3C"></div></div>
	<div class="right">${deliver.editOnSight.toolbarInlineEditing.title}: <input type="checkbox" id="inlineEditing" value="true" checked="checked" onclick="toggleInline();"/></div>
	<div class="right languageContext" style="display:none;"><span title="${currentLanguageName}" onclick="$('#languageSelector').toggle();">${currentLanguageCode}</span><div id="languageSelector" style="display: none; position: fixed; padding: 6px 0 0 10px; bottom: 42px; margin-left: -11px; width: 28px; color: black; background-color: white; box-shadow: rgba(0, 0, 0, 0.2) 0px -3px 3px;"><ul style="list-style: none;">${languageList}</ul></div></div>
	<div id="igStatusDiv" class="right loadingState">${deliver.editOnSight.toolbarState.title}: <span id="igStatus">-</span></div>
</div>

<form id="validatorW3CForm" method="post" action="http://validator.w3.org/check" target="_blank">
	<input type="hidden" id="fragment" name="fragment" value=""/>
</form>

<script type="text/javascript">

window.isPageDirty = false;
window.onbeforeunload = function() {
	if(window.isPageDirty)
		return "${leaveWarningOnDirtyPageText}";
}

function validateW3C()
{
	var previewUrl = document.location.href;
	previewUrl = previewUrl.replace("!renderDecoratedPage.", ".");
	
	$.get(previewUrl, function(data) {
	  
	  	try
		{
			$.ajax({
				type: "POST",
			   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!validateW3C.action",
			   	data: { "markup": data },
			   	dataType: 'json',
			   	cache: false,
			   	success: function(msg, textStatus){
					//alert("msg:" + msg);
					//alert("textStatus:" + textStatus);
					//alert("Messages:" + msg.messages);
					var errors = 0;
					jQuery.each(msg.messages, function() {
					  	//alert("lastLine: " + this.lastLine + ", lastColumn: " + this.lastColumn + ", message: " + this.message + ", type:" + this.type);
					  	if(this.type == "error")
					  	{
					  		errors++;
					  	}
					});
					
					if(errors > 0)
					{
						$(".errorCountW3C").css("display","block").html(errors);
						var confirmQuestion = "${deliver.editOnSight.toolbarValidateW3CErrorsQuestion.label}";
						confirmQuestion = confirmQuestion.replace("{0}",errors);
						if(confirm(confirmQuestion))
						{
							$("#fragment").val(data);
							$("#validatorW3CForm").get(0).submit();
						}
					}
					else
					{
						alert("${deliver.editOnSight.toolbarValidateW3CNoErrors.label}");
			   		}
			   },
			   error: function (XMLHttpRequest, textStatus, errorThrown) {
				   //alert("textStatus:" + textStatus);
				   //alert("ResponseCode:" + XMLHttpRequest.status);
				   alert("We could not validate against W3C: " + textStatus + "/" + errorThrown);
			   }
			});
		}
		catch(e) {console.log("e:" + e);}
	
	});
}

function previewPage()
{
	var currentUrl = document.location.href;
	currentUrl = currentUrl.replace("!renderDecoratedPage.", ".");
	window.open(currentUrl);
}

function hideFooterButtons()
{	
	if(window.self !== window.top)
	{
		$(".myHome, .mySettings, .preview, .publish").hide();
		if(window.hasOpenInNewWindowAccess)
			$(".openInNewWindow").show();
	}
	else
	{
		$(".myHome, .mySettings, .preview").show();
		$(".openInNewWindow").hide();		
	}
	
	if(window.hasAccessToW3CValidator)
		$(".validateW3C").show();
	if(window.hasAccessToShowLanguageMenu)
		$(".languageContext").show();
}

function registerOnChange()
{
	for (key in editOnSightAttributeNames)
	{
		//alert("key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1 &&
		   key.indexOf("_contentId") == -1 &&
		   key.indexOf("_languageId") == -1)
		{
			//alert("key:" + key);
			//alert("key:" + CKEDITOR.instances[key]);
			if(CKEDITOR.instances[key])
			{
				console.log(CKEDITOR.instances[key]);
			
				//alert("regii:" + key);
				CKEDITOR.instances[key].on('change', function(e) {
				    //alert("E:" +e.editor.checkDirty());
				    $("#igSaveButton").show();
			        window.saveButtonLabel = $("#igSaveButton").attr("value");
			        window.isPageDirty = true;
				});

				CKEDITOR.instances[key].on('focus', function(e) {
					//alert("on focus:" + key);
					//alert("on focus:" + e.editor.element.getId());
					var attributeName = editOnSightAttributeNames[e.editor.element.getId()];
					//alert("att name:" + attributeName);
					var attributeType = editOnSightAttributeNames[e.editor.element.getId() + "_type"];
					var attributeContentId = editOnSightAttributeNames[e.editor.element.getId() + "_contentId"];
					var attributeLanguageId = editOnSightAttributeNames[e.editor.element.getId() + "_languageId"];
				 	var enableWYSIWYG = editOnSightAttributeNames[e.editor.element.getId() + "_enableWYSIWYG"];
							
					var data = "contentId=" + attributeContentId + "&languageId=" + attributeLanguageId + "&attributeName=" + attributeName;
							
					$.ajax({
					   	type: "GET",
					   	url: "" + componentEditorUrl + "UpdateContentVersionAttribute!getAttributeValue.action",
					   	data: data,
					   	cache: false,
					   	success: function(msg, textStatus){
							plainAttribute = msg;
						 	
						 	if(enableWYSIWYG == "true")
						 	{
						 		if(userPrefferredWYSIWYG  == "ckeditor4" || userPrefferredWYSIWYG  == "" || typeof(userPrefferredWYSIWYG )=="undefined")
						 		{	
						 			//alert(e.editor.checkDirty());
						 			if(!e.editor.checkDirty())
						 			{
						 				//alert(msg);
							 			e.editor.setData(msg, function() {
										    this.checkDirty(); // true
										});
									}
						 		}
						 	}
					   },
					   error: function (XMLHttpRequest, textStatus, errorThrown) {
						   //alert("textStatus:" + textStatus);
						   alert("ResponseCode:" + XMLHttpRequest.status);
						   //alert("errorThrown:" + errorThrown);
						   if(XMLHttpRequest.status == 403)
						   {
							   alert("You are not logged in properly to the administrative tools - please log in again.");
							   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
						   }
						   else
						   {
							   alert("You are not allowed to edit this text!");
						   }
					   }
					});
				});
			}
		}
	}
}

var inlineOff = false;

function toggleInline()
{
	var turnOn = false;
	if(inlineOff)
		turnOn = true;
		
	for (key in editOnSightAttributeNames)
	{
		//alert("key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1 &&
		   key.indexOf("_contentId") == -1 &&
		   key.indexOf("_languageId") == -1)
		{
			//alert("key:" + key);
			//alert("key:" + CKEDITOR.instances[key]);
			if(CKEDITOR.instances[key])
			{
				if(!turnOn)
				{
					console.log("regii:" + key);
					console.log(CKEDITOR.instances[key]);
					CKEDITOR.instances[key].destroy();
					$("#" + key).attr("contenteditable", "false");
				}
			}
			else
			{	
				//alert("ON again:" + editOnSightAttributeNames[key + "_type"]);
				$("#" + key).attr("contenteditable", "true");
				if(editOnSightAttributeNames[key + "_type"] == "textfield")
				{
	        		CKEDITOR.inline( key , {
					    removePlugins: 'toolbar',
					    /*customConfig: '" + CmsPropertyHandler.getComponentEditorUrl() + "WYSIWYGProperties.action?" + parameterString + "'," + */
						autoParagraph: false,	
						/*WYSIWYGExtraConfig +*/
						});
				}
				else
				{				
					CKEDITOR.inline( key, {
						toolbar: '" + WYSIWYGToolbar + "',
					    /*customConfig: '" + CmsPropertyHandler.getComponentEditorUrl() + "WYSIWYGProperties.action?" + parameterString + "'," + 
						language: '" + languageCode + "'," +
						WYSIWYGExtraConfig +*/
						});
				}									
			}
		}
	}
	
	if(turnOn)
		inlineOff = false;
	else
		inlineOff = true;
}

function saveAllEditing()
{
	$("#igSaveButton").attr("value","Saving...");
	var allSavedItems = 0;
	for (key in editOnSightAttributeNames)
	{
		//alert("Key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1)
		{
			var attributeName = editOnSightAttributeNames[key];
			var attributeType = editOnSightAttributeNames[key + "_type"];
			var attributeContentId = editOnSightAttributeNames[key + "_contentId"];
			var attributeLanguageId = editOnSightAttributeNames[key + "_languageId"];

			//console.log(CKEDITOR.instances);
			//console.log(key);
			//console.log(CKEDITOR.instances[key]);
			if(CKEDITOR.instances[key])
			{
				//alert(CKEDITOR.instances[key].checkDirty());
				if(CKEDITOR.instances[key].checkDirty())
				{
					CKEDITOR.instances[key].resetDirty();
					//alert(CKEDITOR.instances[key].getData());
					saveAttribute(attributeContentId, attributeLanguageId, attributeName, attributeType, key);
					allSavedItems++;
				}
			}
		}
	}
	
	var noDirty = true;
	for (key in editOnSightAttributeNames)
	{
		//alert("Key:" + key);
		if(key.indexOf("_type") == -1 && 
		   key.indexOf("_enableWYSIWYG") == -1 && 
		   key.indexOf("_WYSIWYGToolbar") == -1 &&
		   key.indexOf("_WYSIWYGExtraConfig") == -1)
		{
			var attributeName = editOnSightAttributeNames[key];
			var attributeType = editOnSightAttributeNames[key + "_type"];
			var attributeContentId = editOnSightAttributeNames[key + "_contentId"];
			var attributeLanguageId = editOnSightAttributeNames[key + "_languageId"];

			if(CKEDITOR.instances[key])
			{
				//alert(CKEDITOR.instances[key].checkDirty());
				if(CKEDITOR.instances[key].checkDirty())
				{
					noDirty = false;
				}
			}
		}
	}
	
	if(noDirty)
	{
		window.isPageDirty = false;
		var labelValue = window.saveButtonLabel;
		setTimeout(function(){ $("#igSaveButton").attr("value","Saved!!"); }, 1000);
		//$("#igSaveButton").hide();
		setTimeout(function(){ $("#igSaveButton").fadeOut(1000);}, 2000);
		setTimeout(function(){ $("#igSaveButton").attr("value", window.saveButtonLabel);}, 3000);
	}
			
	if(allSavedItems == 0)
		alert("No changes had been made and so nothing was saved");
}

function updatePageStatus()
{
	try
	{
		var data = "contentId=" + contentId + "&siteNodeId=$siteNodeId";
		if(approveEntityName != "" && approveEntityId != "")
			var data = "contentId=" + contentId + "&siteNodeId=$siteNodeId&approveEntityName=" + approveEntityName + "&approveEntityId=" + approveEntityId + "&eventId=" + publishingEventId;
			
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!publishableNumberOfItems.action",
		   	data: data,
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				
				if(msg != "0")
				{
					$('#igStatusDiv').attr("class", "right working");
					$('#igStatus').html("" + msg);
					if(msg.indexOf("approve=true") > -1)
					{
						var eventId = ""+msg.match(/eventId=[0-9]{1,10}/g);
						if(eventId != "")
						{
							window.publishingEventId = eventId.substring(8);
							$('#igApproveButton').show();
							$('#igDenyButton').show();
						}
					}
					else
					{
						if(window.self === window.top)
							$('#igPublishButton').show();
					}
					$('#igCancelButton').show();
				}
				else
				{
					$('#igStatusDiv').attr("class", "right published");
					$('#igStatus').html("Published");
					$('#igApproveButton').hide();
					$('#igDenyButton').hide();
					$('#igPublishButton').hide();
					$('#igCancelButton').hide();
				}
				
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   alert("ResponseCode:" + XMLHttpRequest.status);
			   //alert("errorThrown:" + errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

function approvePublication()
{
	try
	{
		var data = "eventId=" + publishingEventId + "&repositoryId=" + repositoryId;
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!approvePublication.action",
		   	data: data,
		   	dataType: "html", 
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				//alert("OK");
				document.location.reload(true);
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   //alert("ResponseCode:" + XMLHttpRequest.status);
			   //console.log(errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

function denyPublication()
{
	try
	{
		var data = "eventId=" + publishingEventId + "&repositoryId=" + repositoryId;
		$.ajax({
			type: "GET",
		   	url: "" + cmsBaseUrl + "/ViewCommonAjaxServices!denyPublication.action",
		   	data: data,
		   	dataType: "html", 
		   	cache: false,
		   	success: function(msg, textStatus){
				//alert("msg:" + msg);
				//alert("textStatus:" + textStatus);
				//alert("OK");
				document.location.reload(true);
		   },
		   error: function (XMLHttpRequest, textStatus, errorThrown) {
			   //alert("textStatus:" + textStatus);
			   //alert("ResponseCode:" + XMLHttpRequest.status);
			   //console.log(errorThrown);
			   if(XMLHttpRequest.status == 403)
			   {
				   alert("You are not logged in properly to the administrative tools - please log in again.");
				   window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else if(XMLHttpRequest.status == 0)
			   {
			   		window.open("" + componentEditorUrl + "ViewCMSTool!loginStandalone.action", "Login", "width=400,height=420");
			   }
			   else
			   {
				   alert("You are not allowed to edit this text!");
			   }
		   }
		});
	}
	catch(e) {console.log("e:" + e);}
}

$addComponentJavascript
$deleteComponentJavascript
$changeComponentJavascript
$changeAccessJavascript

$submitToPublishJavascript
$pageStructureJavascript
$openInNewWindowJavascript
$allowViewSourceJavascript
$allowSavePageTemplateJavascript

$submitToNotifyJavascript
$contentNotificationsJavascript
$pageNotificationsJavascript		    

$W3CValidatorJavascript		    
$ShowLanguageMenuJavascript		    
$showHomeButtonJavascript		    
$showMySettingsButtonJavascript		    

$ShowApproveButtonsJavascript
$autoShowApprovalButtonsJavascript
</script>